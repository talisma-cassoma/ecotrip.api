// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  passenger
  driver
  admin
}

enum DriverStatus {
  available
  on_trip
  offline
}

enum TripStatus {
  requested
  accepted
  in_progress
  completed
  cancelled
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String   @unique
  password   String
  role       Role
  image      String?
  telephone  String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  driver        Driver?        @relation("driver")
  refreshTokens UserRefreshToken[] @relation("user_refresh_tokens")
  trips         Trip[]         @relation("passenger_trips")

  TripCancellation TripCancellation[] @relation("user_cancel_trip")
}

model UserRefreshToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String // (ou token hash)
  user_id   String   @unique @db.ObjectId
  user      User     @relation("user_refresh_tokens", fields: [user_id], references: [id])
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model TripCancellation {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  trip    Trip   @relation("trip_cancellation", fields: [id], references: [id])
  trip_id String 

  cancelledBy Role
  reason      String?
  comment     String?

  user    User   @relation("user_cancel_trip", fields: [user_id], references: [id])
  user_id String @unique @db.ObjectId

  createdAt DateTime @default(now())
}

model Driver {
  id      String @id @default(auto()) @map("_id") @db.ObjectId 
  user    User   @relation("driver", fields: [id], references: [id])

  car_model       String
  car_plate       String
  car_color       String
  license_number  String
  rating          Int
  completed_rides Int
  status          DriverStatus
  points          Point[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  trips      Trip[]   @relation("driver_trips")
}

model Trip {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  token   String     @unique @default(uuid()) // ou cuid()
  name        String?
  source      Place
  destination Place
  distance    Float
  duration    Float
  freight     Float
  directions  Json
  status      TripStatus

  passenger_id String @db.ObjectId
  passenger    User   @relation("passenger_trips", fields: [passenger_id], references: [id])

  driver_id String? @db.ObjectId
  driver    Driver? @relation("driver_trips", fields: [driver_id], references: [id])

  interested_driver_ids String[] @db.ObjectId

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  cancellation TripCancellation? @relation("trip_cancellation")
}

type Place {
  name     String
  location Coord
}

type Point {
  location   Coord
  created_at DateTime @default(now())
}

type Coord {
  lat Float
  lng Float
}
