// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Trip {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  source      Place
  destination Place
  distance    Float
  duration    Float
  freight     Float
  directions  Json
  status      String // 'requested' | 'accepted' | 'in_progress' | 'completed' | 'cancelled'

  driver_id String? @db.ObjectId
  driver    Driver? @relation("TripDriver", fields: [driver_id], references: [id])

  interests TripInterest[]

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  passengerId String
}

model Driver {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  trips           Trip[]         @relation("TripDriver") // Trips atribu√≠das a esse driver
  interestedIn    TripInterest[]
  name            String
  image           String
  telephone       String
  carModel        String
  carPlate        String
  carColor        String
  rating          Int
  complited_rides Int
  points          Point[]
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  status          String // 'available' | 'on_trip' | etc.
}

model TripInterest {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  trip_id   String @db.ObjectId
  driver_id String @db.ObjectId

  trip   Trip   @relation(fields: [trip_id], references: [id])
  driver Driver @relation(fields: [driver_id], references: [id])

  createdAt DateTime @default(now())
}

type Place {
  name     String
  location Coord
}

type Point {
  location   Coord
  created_at DateTime @default(now())
}

type Coord {
  lat Float
  lng Float
}
